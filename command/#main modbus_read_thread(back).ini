#main.py modbus_read_thread(backup)

#region modbus RTU讀取（氧氣濃度、溫度）
            # 定義一個函數，用於在執行緒中執行Modbus讀取
            def modbus_read_thread():
                global oxygen_concentration, temperature
                current_datetime = QDateTime.currentDateTime()

                # 讀取SQL的暫存資料表
                sqlGasUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 4))
                sqlDateFormat = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 1))
                sqlTempUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 0))

                try:
                    # 成功連線下，以下讀取modbus可以執行
                    # 讀取濃度、溫度變動值
                    oxygen_concentration = PPV.instrument_ID1.read_float(PPV.R3X_address('Gas'), functioncode=4)
                    temperature = PPV.instrument_ID1.read_float(PPV.R3X_address('Temperature'), functioncode=4)

                    # 讀取modbus的Reg設定值
                    # modbus的設定值與暫存資料表比對（以R4X為主）
                    def ValueCompare(key):
                        return PPV.instrument_ID1.read_register(key, functioncode=3) != int(PySQL.selectSQL_Reg(regDF = 4, regKey = key))
                    
                    for key in PPV.R4X_address:
                        # 由於離時有更動暫存資料表，恢復連線後與modbus比對數值不一致，則將暫存資料表的值寫進modbus
                        if key == 16:
                            if PPV.instrument_ID1.read_float(key, functioncode=3) != float(PySQL.selectSQL_Reg(regDF = 4, regKey = key)):
                                PPV.instrument_ID1.write_float(key, float(PySQL.selectSQL_Reg(regDF = 4, regKey = key)), functioncode=3)
                        else:
                            if ValueCompare(key): 
                                PPV.instrument_ID1.write_register(key, int(PySQL.selectSQL_Reg(regDF = 4, regKey = key)), functioncode=6)


                    self.stateConnect_label.setText('已連線')


                except minimalmodbus.NoResponseError as e:
                    # 出現離線狀態直接執行此區塊

                    self.stateConnect_label.setText('離線')
                except Exception as e:
                    traceback.print_exc()
                    print(f'Thread Inside Exception: {e}')

                self.o2Data.setText(f"{oxygen_concentration:.2f}")
                self.o2Unite.setText(f"{PPV.o2_GasUnitDist[sqlGasUnit]}")
                    
                self.tempData.setText(f"{temperature:.2f}")
                self.tempUnit.setText(f"{PPV.tempUnitDist[sqlTempUnit]}")
            
                formatted_datetime = current_datetime.toString(f"{PPV.dateFormat[sqlDateFormat][1]} hh:mm:ss")
                PPV.current_datetime = current_datetime
                self.datetime.setText(formatted_datetime)


            # 執行緒啟動與modbus互動
            modbus_thread = threading.Thread(target=modbus_read_thread)
            modbus_thread.start()
            
            #endregion