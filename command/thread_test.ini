#zh-tw

#region 連接modbus RTU
# 定義Modbus裝置的串口及地址
instrument = minimalmodbus.Instrument('COM4', 1)  
# 第一個參數是串口，第二個參數是Modbus地址

# 設定串口波特率，Parity和Stop bits（這些參數需與Modbus設備一致）
instrument.serial.baudrate = 9600
instrument.serial.parity = minimalmodbus.serial.PARITY_NONE
instrument.serial.stopbits = 1
instrument.serial.timeout = 1.0

o2_address = 0
temperature_address = 2

#endregion

class MyWindow(QMainWindow):

    #region 主畫面元件
    def __init__(self):
        super().__init__()

        #region 更新日期時間並持續讓modbus讀取資料進圖表    
        self.timer = QTimer(self) # 更新日期時間的 QTimer
        self.timer.timeout.connect(self.update_modbus_data)
        self.timer.timeout.connect(self.update_datetime)
        self.timer.start(1000)  # 每秒更新一次

        # 更新一次日期時間，避免一開始顯示空白
        self.update_datetime()
        #endregion


    #region modbus RTU讀取（氧氣濃度、溫度）
    def update_modbus_data(self):
        global oxygen_concentration, temperature
        try:
            # 定義一個函數，用於在執行緒中執行Modbus讀取
            def modbus_read_thread():
                global oxygen_concentration, temperature
                try:
                    # 讀取浮點數值，地址為1
                    oxygen_concentration = instrument.read_float(o2_address)
                    temperature = instrument.read_float(temperature_address)
                    self.main_label.setText(f"O<sub>2</sub>: {oxygen_concentration:.2f} ppb<br>T: {temperature:.2f} {temperature_unit}")
                    # self.label.setText(f'Modbus Value: {round(value_read_float, 2)}')

                    self.state_label.setText('已連線')
                    print(f'O2:{oxygen_concentration:.2f}, T:{temperature:.2f} {temperature_unit}')

                except minimalmodbus.NoResponseError as e:
                    self.state_label.setText('未連線')
                    print(f'No response from the instrument: {e}')
                except Exception as e:
                    print(f'Exception: {e}')

            # 建立一個新的執行緒並啟動
            modbus_thread = threading.Thread(target=modbus_read_thread)
            modbus_thread.start()
        except Exception as e:
            print(f'Exception: {e}')


    #endregion

