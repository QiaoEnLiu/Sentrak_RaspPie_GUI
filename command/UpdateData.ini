#zh-tw 以下程式碼是modbus、暫存資料表反覆讀取下更新圖表的程式碼，如果我要提升效能，我需要怎麼改善？
class MyWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        PPV.timer.timeout.connect(self.update_datetime)
        PPV.timer.start(1000)

        self.show()


    #region 時間更新
    def update_datetime(self):
        global oxygen_concentration, temperature
        try:
            #region 更新圖表
            
            # 清除之前的圖例
            self.plot_canvas.ax.clear()

            # 重新繪製折線圖
            self.plot_canvas.plot(temperature_unit = temperature_unit_text, 
                                oxygen_concentration = oxygen_concentration, 
                                temperature = temperature #temperature: Celsius, Fahrenheit
                                )  

            # 在這裡更新畫布
            self.plot_canvas.draw()
            #endregion

            #region modbus RTU讀取（氧氣濃度、溫度）
            # 定義一個函數，用於在執行緒中執行Modbus讀取
            def modbus_read_thread():
                global oxygen_concentration, temperature
                current_datetime = QDateTime.currentDateTime()

                # 讀取SQL的暫存資料表
                sqlGasUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 4))
                sqlDateFormat = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 1))
                sqlTempUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 0))

                try:
                    # 成功連線下，以下讀取modbus可以執行
                    #region 讀取R1X（只要讀bit就好）
                    r1x = PPV.instrument_ID1.read_bits(0, 2, functioncode=1)

                    cache_R1X={}
                    for address, value in enumerate(r1x):
                        cache_R1X[address] = value

                    for address, value in cache_R1X.items():
                        if value != int(PySQL.selectSQL_Reg(regDF=1, regKey=address)): # modbus值與暫存SQL不一致，將暫存SQL寫入modbus
                            # PySQL.updateSQL_Reg(1, address, value)
                            PPV.instrument_ID1.write_bit(address, int(PySQL.selectSQL_Reg(regDF=1, regKey=address)))
                    #endregion


                    # 讀取濃度、溫度變動值
                    oxygen_concentration = PPV.instrument_ID3.read_float(PPV.R3X_address('Gas'), functioncode=4)
                    temperature = PPV.instrument_ID3.read_float(PPV.R3X_address('Temperature'), functioncode=4)

                    # 讀取modbus的Reg設定值
                    # modbusGasUnit = PPV.instrument_ID1.read_register(PPV.R4X_address('Set Gas Unit'), functioncode=3)
                    # modbusDateFormat =PPV.instrument_ID1.read_register(PPV.R4X_address('Date Formate'), functioncode=3)
                    # modbusTempUnit = PPV.instrument_ID1.read_register(PPV.R4X_address('Temp unit'), functioncode=3)

                    self.alarm1_label.setVisible(PPV.alarm(PySQL.selectAlarmRelay(), temperature, oxygen_concentration))

                    if self.alarm1_label.isVisible():
                        self.alarmNull_label.setVisible(False)


                    # 讀取地址範圍為 0 到 15 的保持寄存器值
                    values_0_to_15 = PPV.instrument_ID1.read_registers(0, 15, functioncode=3)

                    # 讀取地址範圍為 16 的浮點數值
                    value_16 = PPV.instrument_ID1.read_float(16, functioncode=3)

                    # 讀取地址範圍為 18 到 26 的保持寄存器值
                    values_18_to_26 = PPV.instrument_ID1.read_registers(18, 8, functioncode=3)

                    # 將讀取的保持寄存器值合併為一個字典
                    cache_R4X = {}
                    for address, value in enumerate(values_0_to_15):
                        cache_R4X[address] = value

                    # 將地址 16 加入字典並視為浮點數
                    cache_R4X[16] = value_16

                    for address, value in enumerate(values_18_to_26, start=18):
                        cache_R4X[address] = value

                    # 將讀取的保持寄存器值與暫存資料表進行比對
                    for key, value in cache_R4X.items():
                        # 由於離線時有更動暫存資料表，恢復連線後與modbus比對數值不一致，則將暫存資料表的值寫進modbus
                        if key == 16:
                            if PPV.instrument_ID1.read_float(key, functioncode=3) != float(PySQL.selectSQL_Reg(regDF=4, regKey=key)):
                                PPV.instrument_ID1.write_float(key, float(PySQL.selectSQL_Reg(regDF=4, regKey=key)), functioncode=6)
                        else:
                            if value != int(PySQL.selectSQL_Reg(regDF=4, regKey=key)):
                                PPV.instrument_ID1.write_register(key, int(PySQL.selectSQL_Reg(regDF=4, regKey=key)), functioncode=6)

                    self.stateConnect_label.setText('已連線')
                    # print(f'O2:{oxygen_concentration:.2f} {o2_GasUnitDist[setGasUnit]}, T:{temperature:.2f} {tempUnitDist[temp_unit]}')


                except minimalmodbus.NoResponseError as e:
                    # 出現離線狀態直接執行此區塊

                    self.stateConnect_label.setText('離線')
                    # print(f'No response from the instrument: {e}')
                except AttributeError as e: # 略過無法取得裝置變數的錯誤（因沒有埠號）
                    pass
                except serial.SerialException as e: # 略過未使用埠號、虛擬埠的錯誤
                    pass
                except Exception as e:
                    traceback.print_exc()
                    print(f'Thread Inside Exception: {e}')

                self.o2Data.setText(f"{oxygen_concentration:.2f}")
                self.o2Unite.setText(f"{PPV.o2_GasUnitDist[sqlGasUnit]}")
                    
                self.tempData.setText(f"{temperature:.2f}")
                self.tempUnit.setText(f"{PPV.tempUnitDist[sqlTempUnit]}")
            
                # print(dateFormateIndex)
                formatted_datetime = current_datetime.toString(f"{PPV.dateFormat[sqlDateFormat][1]} hh:mm:ss")
                PPV.current_datetime = current_datetime
                # print(formatted_datetime)
                self.datetime.setText(formatted_datetime)
                # print(self.datetime.text())

                # self.label.setText(f'Modbus Value: {round(value_read_float, 2)}')

            # 執行緒啟動與modbus互動
            modbus_thread = threading.Thread(target=modbus_read_thread)
            modbus_thread.start()
            # formatted_datetime = current_datetime.toString("yyyy-MM-dd hh:mm:ss")
            # self.datetime_label.setText(formatted_datetime)
            # print(f'O2:{oxygen_concentration:.2f}, T:{temperature:.2f} {temperature_unit_default}')

            #endregion

            
        except Exception as e:
            traceback.print_exc()
            print(f'Exception in update_datetime: {e}')

    #endregion