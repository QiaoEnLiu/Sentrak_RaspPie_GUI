#region 時間更新
    # 在初始化中啟動 modbus_read_async 方法
    async def init_async(self):
        print("Update1")
        await self.modbus_read_async()
        # asyncio.run(self.modbus_read_async())
        # 每秒執行一次
        
        
    async def modbus_read_async(self):
        while True:
            print("Update2")
            global oxygen_concentration, temperature
            current_datetime = QDateTime.currentDateTime()

            # 讀取SQL的暫存資料表
            sqlGasUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 4))
            sqlDateFormat = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 1))
            sqlTempUnit = int(PySQL.selectSQL_Reg(regDF = 4, regKey = 0))

            try:
                # 成功連線下，以下讀取modbus可以執行
                #region 讀取R1X（只要讀bit就好）
                r1x = await asyncio.to_thread(PPV.instrument_ID1.read_bits, 0, 2, functioncode=1)

                cache_R1X={}
                for address, value in enumerate(r1x):
                    cache_R1X[address] = value

                for address, value in cache_R1X.items():
                    if value != int(PySQL.selectSQL_Reg(regDF=1, regKey=address)): # modbus值與暫存SQL不一致，將暫存SQL寫入modbus
                        await asyncio.to_thread(PPV.instrument_ID1.write_bit, address, int(PySQL.selectSQL_Reg(regDF=1, regKey=address)))
                #endregion

                # 讀取濃度、溫度變動值
                oxygen_concentration = await asyncio.to_thread(PPV.instrument_ID3.read_float, PPV.R3X_address('Gas'), functioncode=4)
                temperature = await asyncio.to_thread(PPV.instrument_ID3.read_float, PPV.R3X_address('Temperature'), functioncode=4)

                self.alarm1_label.setVisible(PPV.alarm(PySQL.selectAlarmRelay(), temperature, oxygen_concentration))
                
                if self.alarm1_label.isVisible():
                    self.alarmNull_label.setVisible(False)

                # 讀取地址範圍為 0 到 15 的保持寄存器值
                values_0_to_15 = await asyncio.to_thread(PPV.instrument_ID1.read_registers, 0, 15, functioncode=3)

                # 讀取地址範圍為 16 的浮點數值
                value_16 = await asyncio.to_thread(PPV.instrument_ID1.read_float, 16, functioncode=3)

                # 讀取地址範圍為 18 到 26 的保持寄存器值
                values_18_to_26 = await asyncio.to_thread(PPV.instrument_ID1.read_registers, 18, 8, functioncode=3)

                # 將讀取的保持寄存器值合併為一個字典
                cache_R4X = {}
                for address, value in enumerate(values_0_to_15):
                    cache_R4X[address] = value

                # 將地址 16 加入字典並視為浮點數
                cache_R4X[16] = value_16

                for address, value in enumerate(values_18_to_26, start=18):
                    cache_R4X[address] = value

                # 將讀取的保持寄存器值與暫存資料表進行比對
                for key, value in cache_R4X.items():
                    # 由於離線時有更動暫存資料表，恢復連線後與modbus比對數值不一致，則將暫存資料表的值寫進modbus
                    if key == 16:
                        if await asyncio.to_thread(PPV.instrument_ID1.read_float, key, functioncode=3) != float(PySQL.selectSQL_Reg(regDF=4, regKey=key)):
                            await asyncio.to_thread(PPV.instrument_ID1.write_float, key, float(PySQL.selectSQL_Reg(regDF=4, regKey=key)), functioncode=6)
                    else:
                        if value != int(PySQL.selectSQL_Reg(regDF=4, regKey=key)):
                            await asyncio.to_thread(PPV.instrument_ID1.write_register, key, int(PySQL.selectSQL_Reg(regDF=4, regKey=key)), functioncode=6)

                self.stateConnect_label.setText('已連線')

            except minimalmodbus.NoResponseError as e:
                # 出現離線狀態直接執行此區塊
                self.stateConnect_label.setText('離線')
            except AttributeError as e: # 略過無法取得裝置變數的錯誤（因沒有埠號）
                pass
            except serial.SerialException as e: # 略過未使用埠號、虛擬埠的錯誤
                pass
            except Exception as e:
                traceback.print_exc()
                print(f'Thread Inside Exception: {e}')

            self.o2Data.setText(f"{oxygen_concentration:.2f}")
            self.o2Unite.setText(f"{PPV.o2_GasUnitDist[sqlGasUnit]}")
                        
            self.tempData.setText(f"{temperature:.2f}")
            self.tempUnit.setText(f"{PPV.tempUnitDist[sqlTempUnit]}")
                
            formatted_datetime = current_datetime.toString(f"{PPV.dateFormat[sqlDateFormat][1]} hh:mm:ss")
            PPV.current_datetime = current_datetime
            self.datetime.setText(formatted_datetime)

            await asyncio.sleep(1)

         

    #endregion